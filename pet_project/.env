# DB_NAME = online_shop
# DB_USER = shop_owner
# DB_PASSWORD = store_password
# DB_HOST = localhost

DATABASE_URL=postgresql://online_shop_qnyd_user:GbAzutW1cKRZ79Iwxc70JCrXVsQ1pmFl@dpg-crqph8lumphs73bs3vog-a.oregon-postgres.render.com/online_shop_qnyd

# REDIS_HOST = 'localhost'
# REDIS_URL = 'redis://localhost:6379/0'
REDIS_HOST=redis
REDIS_URL=redis://redis:6379/0
# REDIS_HOST=red-crrgv9dumphs73b9l700
# REDIS_URL=redis://red-crrgv9dumphs73b9l700:6379/0

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = '2007kim.maksim@gmail.com'
EMAIL_HOST_PASSWORD = 'eshtmkwrznuymjsm'
EMAIL_PORT = 587

STRIPE_PUBLISHABLE_KEY = 'pk_test_51PLAVyDo5uaPJl4sZnu2nfKjDPjFQqgc24tfaMw4JnE0QsaVxRJ7tWiaUKpnFduAPfQbJpzr7Mge1d2wkNocl1hU00YSQk285H'
STRIPE_SECRET_KEY = 'sk_test_51PLAVyDo5uaPJl4svwhpMCwmcRdLWVQjKmNm8ddxkxBh1ZrJtMDXqeQDpmeuuU2QPrONZurEjF6V3djGWlsT6mjc00pIB7NZLp'
STRIPE_API_VERSION = '2024-04-10'
#STRIPE_WEBHOOK_SECRET = 'whsec_o4MTEkPB8tYpojzDIz8Llk7X47dOG4iw'
STRIPE_WEBHOOK_SECRET = 'whsec_KzYJyda8cJe61FKMB9dVGDo8340Ab27z'


# 2007kim.maksim@gmail.com
# adminqwertyuiop

#'HOST': os.environ.get('DB_HOST'),

#CELERY_BROKER_URL = 'redis://redis:6379/0'  # URL Redis для брокера сообщений
#CELERY_RESULT_BACKEND = 'redis://redis:6379/0'  # URL Redis для хранения результатов задач

#REDIS_HOST = 'redis'

# STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY'),
# STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY'),
# STRIPE_API_VERSION = os.environ.get('STRIPE_API_VERSION'),
# STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET'),
# STRIPE_WEBHOOK_SECRET = 'whsec_KzYJyda8cJe61FKMB9dVGDo8340Ab27z'


#set PATH=%PATH%;%SystemRoot%\system32;C:\Users\Максим\Downloads\gettext\bin

# django-admin makemessages --all внесение слов
# makemessages: Эта команда создает файлы перевода
# .po для всех текстовых строк, помеченных для перевода
# в коде вашего Django приложения. Она анализирует
# исходный код приложения, находит все строки,
# которые должны быть переведены, и создает
# соответствующие файлы .po или слова для перевода

# django-admin compilemessages применение перевода слов
# Эта команда компилирует файлы перевода .po
# в бинарные файлы формата .mo, которые Django
# может использовать для перевода текста на другие языки.
# Это необходимо для того, чтобы Django мог
# эффективно загружать и использовать переводы
# во время выполнения. Команда обычно вызывается после того,
# как были внесены или изменены переводы,
# чтобы обновить бинарные файлы перевода.


# python -m weasyprint https://weasyprint.org weasyprint.pdf


# celery -A pet_project worker -l info --pool=eventlet
# celery -A pet_project worker --loglevel=info -P eventlet


# cd stripe_1.19.5_windows_i1386
# stripe listen --forward-to 127.0.0.1:8000/payment/webhook/
# это и есть endpoint но лишь в среде разработки

# алгоритм работы вебхука при обработке событий Stripe:
# 1. **Отправка события**: Когда происходит событие в системе Stripe (например, успешная оплата или создание подписки), Stripe отправляет POST-запрос на URL вашего вебхука.
# 2. **Получение запроса**: Ваш веб-сервер Django принимает этот POST-запрос на URL, указанный для вебхука.
# 3. **Проверка подписи**: В вашем представлении вебхука сначала проверяется подпись с использованием секретного ключа, который вы установили в настройках Stripe. Это обеспечивает безопасность передаваемых данных, гарантируя, что запросы действительно отправлены Stripe и не были изменены по пути.
# 4. **Получение данных события**: После проверки подписи ваше приложение извлекает данные события из тела запроса. Эти данные включают в себя тип события и связанные с ним дополнительные данные, такие как идентификатор платежа или информация о заказе.
# 5. **Обработка события**: На основе типа события ваше приложение выполняет определенные действия. Например, если событие - успешная оплата, то ваше приложение может пометить заказ как оплаченный в базе данных или отправить уведомление покупателю.
# 6. **Возвращение ответа**: После успешной обработки события ваше приложение должно вернуть HTTP-ответ с кодом статуса 200 (ОК). Это сообщает Stripe, что событие было успешно обработано. Если ваше приложение вернет любой другой код статуса (например, 400 или 500), Stripe будет пытаться повторить запрос впоследствии.
# 7. **Логирование и обработка ошибок**: Во время обработки событий важно логировать действия вашего приложения и обрабатывать любые ошибки, которые могут возникнуть. Это помогает в отслеживании процесса обработки и устранении проблем.
